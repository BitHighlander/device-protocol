syntax = "proto2";

/**
 * WARNING: Make sure Osmosis messages align with the tendermint messages
 */

// Sugar for easier handling in Java
option java_package = "com.keepkey.deviceprotocol";
option java_outer_classname = "KeepKeyMessageOsmosis";


/**
 * Request: Address at the specified index
 * @start
 * @next OsmosisAddress
 */
message OsmosisGetAddress {
  repeated uint32 address_n = 1; // BIP-32 path. For compatibility with other
                                 // wallets, must be m/44'/931'/index'
  optional bool show_display =
      2; // optionally show on display before sending the result
  optional bool testnet =
      3; // if true, return an address with the testnet prefix
}

/**
 * Response: Address for the given index
 * @end
 */
message OsmosisAddress {
  optional string address =
      1; // Address Bech32 encoded with 'thor' prefix (or 'tthor' for testnet)
}

/**
 * Request: ask device to sign Osmosis transaction
 * @start
 * @next OsmosisSignedTx
 */
message OsmosisSignTx {
  repeated uint32 address_n = 1; // BIP-32 path. For compatibility with other
                                 // wallets, must be m/44'/931'/index'/0/0
  optional uint64 account_number = 2 [ jstype = JS_STRING ];
  optional string chain_id = 3;
  optional uint32 fee_amount = 4;
  optional uint32 gas = 5;
  optional string memo = 6;
  optional uint64 sequence = 7 [ jstype = JS_STRING ];
  optional uint32 msg_count = 8;
  optional bool testnet = 9; // if true, decode addresses with prefix 'tthor'
}

message OsmosisMsgRequest {}

message OsmosisMsgAck {
  optional OsmosisMsgSend send = 1;
  optional OsmosisMsgDelegate delegate = 2;
  optional OsmosisMsgUndelegate undelegate = 3;
  optional OsmosisMsgClaim claim = 4;
}

message OsmosisMsgSend {
  optional string from_address = 1;
  optional string to_address = 2;
  optional uint64 amount = 3 [ jstype = JS_STRING ];
}

message OsmosisMsgDelegate {
  optional string delegator_address = 1;
  optional string validator_address = 2;
  optional uint64 amount = 3 [ jstype = JS_STRING ];
}

message OsmosisMsgUndelegate {
  optional string delegator_address = 1;
  optional string validator_address = 2;
  optional uint64 amount = 3 [ jstype = JS_STRING ];
}

message OsmosisMsgClaim {
  optional string delegator_address = 1;
  optional string validator_address = 2;
  optional uint64 amount = 3 [ jstype = JS_STRING ];
}

/**
 * Response: signature for transaction
 * @end
 */
message OsmosisSignedTx {
  optional bytes public_key =
      1; // public key for the private key used to sign data
  optional bytes signature =
      2; // signature suitable for sending to the Osmosis network
}
