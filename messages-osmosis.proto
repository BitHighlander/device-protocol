syntax = "proto2";

/**
 * WARNING: Make sure Osmosis messages align with the tendermint messages
 */

// Sugar for easier handling in Java
option java_package = "com.keepkey.deviceprotocol";
option java_outer_classname = "KeepKeyMessageOsmosis";

import "types.proto";

/**
 * Request: Address at the specified index
 * @start
 * @next OsmosisAddress
 */
message OsmosisGetAddress {
  repeated uint32 address_n = 1; // BIP-32 path. For compatibility with other
                                 // wallets, must be m/44'/931'/index'
  optional bool show_display = 2; // optionally show on display before sending the result
  optional bool testnet = 3; // if true, return an address with the testnet prefix
}

/**
 * Response: Address for the given index
 * @end
 */
message OsmosisAddress {
  optional string address = 1; // Bech32-encoded address
}

message OsmosisToken {
  optional string denom = 1;
  optional uint64 amount = 2 [ jstype = JS_STRING ];
}

message OsmosisTimeoutHeight {
  optional uint64 revision_number = 1;
  optional uint64 revision_height = 2;
}

/**
 * Request: ask device to sign Osmosis transaction
 * @start
 * @next OsmosisSignedTx
 */
message OsmosisSignTx {
  repeated uint32 address_n = 1; // BIP-32 path. For compatibility with other
                                 // wallets, must be m/44'/931'/index'/0/0
  optional uint64 account_number = 2 [ jstype = JS_STRING ];
  optional string chain_id = 3;
  optional uint32 fee_amount = 4;
  optional uint32 gas = 5;
  optional string memo = 6;
  optional uint64 sequence = 7 [ jstype = JS_STRING ];
  optional uint32 msg_count = 8;
  optional bool testnet = 9; // if true, decode addresses with prefix 'tthor'
}

message OsmosisMsgRequest {}

message OsmosisMsgAck {
  optional OsmosisMsgSend send = 1;
  optional OsmosisMsgDelegate delegate = 2;
  optional OsmosisMsgUndelegate undelegate = 3;
  optional OsmosisMsgClaim claim = 4;
}

message OsmosisMsgSend {
  optional string from_address = 1;
  optional string to_address = 2;
  optional uint64 amount = 3 [ jstype = JS_STRING ];
  optional OutputAddressType address_type = 4;
}

message OsmosisMsgDelegate {
  optional string delegator_address = 1;
  optional string validator_address = 2;
  optional OsmosisToken token = 3;
}

message OsmosisMsgUndelegate {
  optional string delegator_address = 1;
  optional string validator_address = 2;
  optional OsmosisToken token = 3;
}


message OsmosisLPAdd {
  optional string sender = 1;
  optional string pool_id = 2;
  optional uint64 share_out_amount = 3;
  optional OsmosisToken token_in_max_a = 4;
  optional OsmosisToken token_in_max_b = 5;
}

message OsmosisLPRemove {
  optional string sender = 1;
  optional string pool_id = 2;
  optional uint64 share_out_amount = 3;
  optional OsmosisToken token_out_min_a = 4;
  optional OsmosisToken token_out_min_b = 5;
}

message OsmosisIBCDeposit {
  optional string source_port = 1;
  optional string source_channel = 2;
  optional string source_chain = 3;
  optional OsmosisToken token = 4;
  optional string sender = 5;
  optional string receiver = 6;
  optional OsmosisTimeoutHeight timeout_height = 7;
}

message OsmosisIBCWithdrawal {
  optional string source_port = 1;
  optional string source_channel = 2;
  optional string source_chain = 3;
  optional OsmosisToken token = 4;
  optional string sender = 5;
  optional string receiver = 6;
  optional OsmosisTimeoutHeight timeout_height = 7;
}

message OsmosisMsgClaim {
  optional string delegator_address = 1;
  optional string validator_address = 2;
  optional uint64 amount = 3 [ jstype = JS_STRING ];
}

message OsmosisMsgSwap {
  optional string sender_address = 1;
  optional string pool_id = 2;
  optional string token_out_denom = 3;
  optional string token_in_denom = 4;
  optional uint64 amount = 5;
  optional uint64 token_out_min_amount = 6;
}

message OsmosisMsgFarmTokens {
  optional string owner = 1;
  optional uint64 duration = 2;
  optional OsmosisToken token = 3;
}

/**
 * Response: signature for transaction
 * @end
 */
message OsmosisSignedTx {
  optional bytes public_key = 1; // public key for the private key used to sign data
  optional bytes signature = 2; // signature suitable for sending to the Osmosis network
}
